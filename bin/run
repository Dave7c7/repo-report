#!/usr/bin/env node
/* eslint-disable max-lines-per-function */
/* eslint-disable no-throw-literal */
/* eslint-disable no-magic-numbers */

'use strict';

require('dotenv').config();
const Yargs = require('yargs');
const logSymbols = require('log-symbols');
const list = require('../src/commands/list');
const options = require('../src/commands/options');
const branchProtections = require('../src/commands/branchProtections');
const prStatus = require('../src/commands/pr-status');
const detail = require('../src/commands/detail');

Yargs.usage('Usage: $0 <command> [options]')
	.default('token', process.env.GITHUB_PAT)
	.hide('token')
	.check((arg) => {
		if (arg.token) {
			return true;
		}
		throw `${logSymbols.error} env variable GITHUB_PAT not found. Refer to #Installation in README.md on how to set env variable`;
	})
	.command('list', 'lists all repositories', function (yargs) {
		const argv = yargs
			.usage('Usage: $0 list [options]')

			.alias('g', 'group-by')
			.nargs('g', 1)
			.describe('g', 'Field to be grouped by')
			.alias('m', 'metrics')
			.boolean('m')
			.describe('m', 'Show available metrics')
			.alias('s', 'sort')
			.describe('s', 'Sort repos alphabetically')
			.help('h')
			.alias('h', 'help').argv;
		list(argv);
	})
	.command('options', 'lists option settings', function (yargs) {
		const argv = yargs
			.usage('Usage: $0 options [options]')
			.alias('g', 'group-by')
			.nargs('g', 1)
			.describe('g', 'Field to be grouped by')
			.alias('m', 'metrics')
			.boolean('m')
			.describe('m', 'Show available metrics')
			.alias('s', 'sort')
			.describe('s', 'Sort repos alphabetically')
			.help('h')
			.alias('h', 'help').argv;
		options(argv);
	})
	.command(
		'branchProtections',
		'list branch protections for default branch for all repositories',
		function (yargs) {
			const argv = yargs
				.usage('Usage: $0 branchProtections [options]')
				.alias('g', 'group-by')
				.nargs('g', 1)
				.describe('g', 'Field to be grouped by')
				.alias('m', 'metrics')
				.boolean('m')
				.describe('m', 'Show available metrics')
				.help('h')
				.alias('h', 'help').argv;
			branchProtections(argv);
		},
	)
	.command(
		'pr-status',
		'fetch status checks for a particular repository and a given pull request number',
		function (yargs) {
			const argv = yargs
				.usage('Usage: $0 pr-status --repo <owner/repo> --id <pr-id> [options]')
				.option('repo', {
					describe: 'the owner\'s name and the repository\'s name separated by /',
				})
				.option('id', {
					describe: 'the pull request\'s unique identifier',
				})
				.demandOption(['repo', 'id'])
				.help('h')
				.alias('h', 'help').argv;
			prStatus(argv);
		},
	)
	.command(
		'detail',
		'fetch all available details about all of your repositories',
		function (yargs) {
			const argv = yargs
				.usage('Usage: $0 detail [options]')
				.option('actual', {
					describe: 'Show metricsâ€™ true values',
				})
				.option('all', {
					describe: 'Show all metrics',
				})
				.option('goodness', {
					describe: 'Prefix actual values with goodness values',
				})
				.option('f', {
					choices: [
						'sources',
						'forks',
						'templates',
						'private',
						'public',
					],
					describe: 'Focus repo types',
				})
				.option('p', {
					alias: 'pick',
					choices: [
						'Access',
						'IssuesEnabled',
						'ProjectsEnabled',
						'WikiEnabled',
						'Archived',
						'BlankIssuesEnabled',
						'SecurityPolicyEnabled',
						'License',
						'MergeStrategies',
						'DeleteOnMerge',
						'HasStarred',
						'Subscription',
						'DefBranch',
						'AllowsForcePushes',
						'AllowsDeletions',
						'DismissesStaleReviews',
						'ReqApprovingReviewCount',
						'ReqApprovingReviews',
						'ReqCodeOwnerReviews',
					],
					describe: 'Pick metrics',

				})
				.option('cache', {
					describe: 'Dump API requests and cleaned up data in cache/',
				})
				.alias('s', 'sort')
				.describe('s', 'Sort repos alphabetically')
				.help('h')
				.alias('h', 'help').argv;
			detail(argv);
		},
	)
	.help('h')
	.alias('h', 'help')
	.parse();
