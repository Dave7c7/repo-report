#!/usr/bin/env node
/* eslint-disable no-throw-literal */

'use strict';

require('dotenv').config();
const Yargs = require('yargs');
const colors = require('colors/safe');
const homedir = require('os').homedir();
const path = require('path');

const symbols = require('../src/symbols');
const { isConfigValid } = require('../src/utils');

const {
	GH_TOKEN,
	GITHUB_TOKEN,
	XDG_CONFIG_HOME,
} = process.env;

// Variable to prevent calling isConfigValid twice
let configValidated;
const defaultConfigPaths = [].concat(
	XDG_CONFIG_HOME ? path.join(XDG_CONFIG_HOME, 'repo-report.json') : [],
	path.join(homedir, '.repo-report.json'),
);

const cachePath = XDG_CACHE_DIR ? path.join(XDG_CACHE_DIR, '.repo-report') : path.join(homedir, '.repo-report', 'cache');

const getCommandMeta = (yargs) => yargs
	.usage('Usage: $0 [options]')

	.option('gui', {
		describe: 'Show output in the form of a webpage',
	})
	.option('unactionable', {
		describe: `Shows values of metrics you lack permissions to change, with a ${symbols.unactionable} next to it`,
	})
	.option('actual', {
		describe: 'Show metricsâ€™ true values',
	})
	.option('all', {
		describe: 'Show all metrics',
	})
	.option('goodness', {
		describe: 'Prefix actual values with goodness values',
	})
	.option('f', {
		choices: [
			'sources',
			'forks',
			'templates',
			'private',
			'public',
		],
		describe: 'Focus repo types',
	})
	.option('p', {
		alias: 'pick',
		choices: [
			'Access',
			'IssuesEnabled',
			'ProjectsEnabled',
			'WikiEnabled',
			'AllowsForking',
			'Archived',
			'AutoMergeAllowed',
			'BlankIssuesEnabled',
			'SecurityPolicyEnabled',
			'License',
			'MergeStrategies',
			'DeleteOnMerge',
			'HasStarred',
			'Subscription',
			'DefBranch',
			'AllowsForcePushes',
			'AllowsDeletions',
			'DismissesStaleReviews',
			'ReqApprovingReviewCount',
			'ReqApprovingReviews',
			'ReqCodeOwnerReviews',
			'ReqConversationResolution',
		],
		describe: 'Pick metrics',

	})
	.option('cache', {
		default: false,
		describe: 'Dump API requests and cleaned up data in `--cacheDir` path',
	})
	.option('cacheDir', {
		default: cachePath,
		normalize: true,
	})
	.hide('cacheDir')
	.alias('s', 'sort')
	.boolean('s')
	.describe('s', 'Sort repos alphabetically')
	.alias('m', 'metrics')
	.boolean('m')
	.describe('m', 'Show available metrics')
	.help('h')
	.alias('h', 'help')
	.strict();


Yargs.usage('Usage: $0 <command> [options]')
	.config('config')
	// .default('config', `${process.env.HOME}/.repo-report.json`)
	.check(({ config }) => {
		if (configValidated) {
			return true;
		}
		configValidated = true;
		const configPaths = [].concat(
			config || [],
			defaultConfigPaths,
		);
		const { valid, error } = isConfigValid(configPaths);
		if (!valid) {
			throw `${symbols.error} ${colors.red(error)}`;
		}
		return true;
	})
	.default('token', GH_TOKEN || GITHUB_TOKEN)
	.hide('token')
	.check(({ token }) => !!token || colors.red(`${symbols.error} env variable GH_TOKEN or GITHUB_TOKEN, or \`--token\` argument, not found.\n\nRefer to #Installation in README.md on how to set an env variable`))
	.commandDir(path.join(__dirname, './commands'))
	.help('help')
	.parse();
